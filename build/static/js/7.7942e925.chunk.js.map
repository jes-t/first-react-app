{"version":3,"sources":["components/Dialogs/Components/Companions/Companion.js","components/Dialogs/Components/Companions/Companions.js","components/Dialogs/Components/Messages/Message.js","components/Dialogs/Components/Messages/Messages.js","components/Dialogs/Dialogs.js","components/Dialogs/DialogsContainer.js"],"names":["styled","List","Item","MainContainer","div","mapDispatchToProps","addMessage","newMessageActionCreator","DialogsContainer","compose","connect","state","dialogs","usersArr","users","withAuthRedirect","useState"],"mappings":"gUAiBsBA,YAAOC,IAAKC,KAAZF,CAAH,K,wFCHIA,YAAOC,IAAPD,CAAH,K,6ICsCAA,YAAOC,IAAKC,KAAZF,CAAH,K,oICtCIA,YAAOC,IAAPD,CAAH,K,6NCRX,IAyBDG,EAAgBH,IAAOI,IAAV,K,GAGHJ,IAAOI,IAAV,K,wBCrBPC,EAAqB,CAAEC,WAAYC,KAEnCC,EAAmBC,YACvBC,aAVsB,SAACC,GACvB,MAAO,CACLC,QAASD,EAAMC,QAAQA,QACvBC,SAAUF,EAAMG,MAAMD,YAOCR,GACzBU,IAFuBN,EDTF,SAAC,GAAsC,EAApCH,WAAoC,EAAxBM,QAAwB,EAAfC,SAAgB,IAAD,EACtBG,mBAAS,IADa,6BAQ5D,OACE,kBAACb,EAAD,kECKWK","file":"static/js/7.7942e925.chunk.js","sourcesContent":["import React from \"react\";\nimport { List, Avatar } from \"antd\";\nimport styled from \"styled-components\";\n\nexport const Companion = (props) => {\n\n  return (\n    <CompanionItem>\n      <List.Item.Meta\n        avatar={<Avatar src={props.dialog.avatarUrl} />}\n        title={`${props.dialog.firstName} ${props.dialog.lastName}`}\n        description={props.dialog.messages[2].message}\n      />\n    </CompanionItem>\n  );\n};\n\nconst CompanionItem = styled(List.Item)`\n  padding: 16px;\n  :hover {\n    background-color: #fafafa;\n  }\n`;","import React from \"react\";\nimport { List } from \"antd\";\nimport { Companion } from \"./Companion\";\nimport styled from \"styled-components\";\n\nexport const Companions = (props) => {\n  return (\n    <CompanionsList\n      dataSource={props.dialogs}\n      renderItem={(item) => <Companion dialog={item} />}\n    />\n  );\n};\n\nconst CompanionsList = styled(List)`\n  width: 300px;\n`;\n","import React from 'react'\nimport { List } from 'antd'\nimport Avatar from 'antd/lib/avatar/avatar'\nimport styled from 'styled-components'\n\nexport const Message = ({ dialog, usersArr }) => {\n  return (\n    <MessageItem>\n      {dialog.messages.map((message) => {\n        const fullName = usersArr.filter((element) => {\n          if (element.id === message.userId) {\n            return element\n          }\n        })\n\n        return (\n          <List.Item.Meta\n            avatar={<Avatar src={fullName[0].avatarUrl} />}\n            style={{ width: '100%', padding: 10 }}\n            title={\n              <Title\n                firstName={fullName[0].firstName}\n                lastName={fullName[0].lastName}\n                time={message.time}\n              />\n            }\n            description={<Description message={message.message} />}\n          />\n        )\n      })}\n    </MessageItem>\n  )\n}\n\nconst Description = ({ message }) => {\n  return (\n    <>\n      <div>{message}</div>\n    </>\n  )\n}\n\nconst Title = ({ firstName, lastName, time }) => {\n  return (\n    <div>\n      <span>{`${firstName} ${lastName}`}</span>\n      <span style={{ paddingLeft: 10, fontWeight: 100, fontSize: 12 }}>\n        {time}\n      </span>\n    </div>\n  )\n}\nconst MessageItem = styled(List.Item)`\n  display: flex;\n  flex-direction: column;\n  padding: 16px;\n`\n","import React from 'react'\nimport { List } from 'antd'\nimport { Message } from './Message'\nimport styled from 'styled-components'\n\nexport const Messages = ({ dialogs, usersArr }) => {\n  return (\n    <MessagesList\n      dataSource={dialogs}\n      renderItem={(item) => <Message dialog={item} usersArr={usersArr} />}\n    />\n  )\n}\n\nconst MessagesList = styled(List)`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n`\n","import React, { useState } from 'react'\nimport { Companions } from './Components/Companions/Companions'\nimport { Messages } from './Components/Messages/Messages'\nimport { Input } from 'antd'\nimport styled from 'styled-components'\n\nexport const Dialogs = ({ addMessage, dialogs, usersArr }) => {\n  const [textMessage, setTextMessage] = useState('')\n\n  const onEnter = () => {\n    addMessage(textMessage)\n    setTextMessage('')\n  }\n\n  return (\n    <MainContainer>\n      Сообщения\n      {/* <Companions dialogs={dialogs} />\n      <Content>\n        <Messages dialogs={dialogs} usersArr={usersArr} />\n        <Input.TextArea\n          autoSize\n          onPressEnter={onEnter}\n          onChange={(e) => setTextMessage(e.target.value)}\n          value={textMessage}\n          style={{ width: '300px' }}\n        />\n      </Content> */}\n    </MainContainer>\n  )\n}\nconst MainContainer = styled.div`\n  display: flex;\n`\nconst Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n`\n","import { newMessageActionCreator } from '../../redux/dialogs-reducer'\nimport { Dialogs } from './Dialogs'\nimport { connect } from 'react-redux'\nimport { compose } from 'redux'\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect'\n\nconst mapStateToProps = (state) => {\n  return {\n    dialogs: state.dialogs.dialogs,\n    usersArr: state.users.usersArr,\n  }\n}\n\nconst mapDispatchToProps = { addMessage: newMessageActionCreator }\n\nconst DialogsContainer = compose(\n  connect(mapStateToProps, mapDispatchToProps),\n  withAuthRedirect\n)(Dialogs)\n\nexport default DialogsContainer\n"],"sourceRoot":""}